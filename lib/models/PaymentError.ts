import mongoose, { Document, Model, Schema } from "mongoose";

// Square API Error Codes enum
export enum SquareErrorCode {
  // Server Errors
  INTERNAL_SERVER_ERROR = "INTERNAL_SERVER_ERROR",
  TEMPORARY_ERROR = "TEMPORARY_ERROR",

  // Authorization Errors
  UNAUTHORIZED = "UNAUTHORIZED",
  ACCESS_TOKEN_EXPIRED = "ACCESS_TOKEN_EXPIRED",
  ACCESS_TOKEN_REVOKED = "ACCESS_TOKEN_REVOKED",
  CLIENT_DISABLED = "CLIENT_DISABLED",
  FORBIDDEN = "FORBIDDEN",
  INSUFFICIENT_SCOPES = "INSUFFICIENT_SCOPES",
  APPLICATION_DISABLED = "APPLICATION_DISABLED",
  V1_APPLICATION = "V1_APPLICATION",
  V1_ACCESS_TOKEN = "V1_ACCESS_TOKEN",

  // Merchant/Location Errors
  CARD_PROCESSING_NOT_ENABLED = "CARD_PROCESSING_NOT_ENABLED",
  MERCHANT_SUBSCRIPTION_NOT_FOUND = "MERCHANT_SUBSCRIPTION_NOT_FOUND",
  UNSUPPORTED_COUNTRY = "UNSUPPORTED_COUNTRY",
  UNSUPPORTED_CURRENCY = "UNSUPPORTED_CURRENCY",
  INVALID_LOCATION = "INVALID_LOCATION",
  LOCATION_MISMATCH = "LOCATION_MISMATCH",

  // Request Validation Errors
  BAD_REQUEST = "BAD_REQUEST",
  MISSING_REQUIRED_PARAMETER = "MISSING_REQUIRED_PARAMETER",
  INCORRECT_TYPE = "INCORRECT_TYPE",
  INVALID_TIME = "INVALID_TIME",
  INVALID_TIME_RANGE = "INVALID_TIME_RANGE",
  INVALID_VALUE = "INVALID_VALUE",
  INVALID_CURSOR = "INVALID_CURSOR",
  UNKNOWN_QUERY_PARAMETER = "UNKNOWN_QUERY_PARAMETER",
  CONFLICTING_PARAMETERS = "CONFLICTING_PARAMETERS",
  EXPECTED_JSON_BODY = "EXPECTED_JSON_BODY",
  INVALID_SORT_ORDER = "INVALID_SORT_ORDER",
  VALUE_REGEX_MISMATCH = "VALUE_REGEX_MISMATCH",
  VALUE_TOO_SHORT = "VALUE_TOO_SHORT",
  VALUE_TOO_LONG = "VALUE_TOO_LONG",
  VALUE_TOO_LOW = "VALUE_TOO_LOW",
  VALUE_TOO_HIGH = "VALUE_TOO_HIGH",
  VALUE_EMPTY = "VALUE_EMPTY",
  ARRAY_LENGTH_TOO_LONG = "ARRAY_LENGTH_TOO_LONG",
  ARRAY_LENGTH_TOO_SHORT = "ARRAY_LENGTH_TOO_SHORT",
  ARRAY_EMPTY = "ARRAY_EMPTY",
  EXPECTED_BOOLEAN = "EXPECTED_BOOLEAN",
  EXPECTED_INTEGER = "EXPECTED_INTEGER",
  EXPECTED_FLOAT = "EXPECTED_FLOAT",
  EXPECTED_STRING = "EXPECTED_STRING",
  EXPECTED_OBJECT = "EXPECTED_OBJECT",
  EXPECTED_ARRAY = "EXPECTED_ARRAY",
  EXPECTED_MAP = "EXPECTED_MAP",
  EXPECTED_BASE64_ENCODED_BYTE_ARRAY = "EXPECTED_BASE64_ENCODED_BYTE_ARRAY",
  INVALID_ARRAY_VALUE = "INVALID_ARRAY_VALUE",
  INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
  INVALID_CONTENT_TYPE = "INVALID_CONTENT_TYPE",
  INVALID_FORM_VALUE = "INVALID_FORM_VALUE",

  // Customer Errors
  CUSTOMER_NOT_FOUND = "CUSTOMER_NOT_FOUND",
  CUSTOMER_MISSING_NAME = "CUSTOMER_MISSING_NAME",
  CUSTOMER_MISSING_EMAIL = "CUSTOMER_MISSING_EMAIL",

  // General Errors
  ONE_INSTRUMENT_EXPECTED = "ONE_INSTRUMENT_EXPECTED",
  NO_FIELDS_SET = "NO_FIELDS_SET",
  TOO_MANY_MAP_ENTRIES = "TOO_MANY_MAP_ENTRIES",
  MAP_KEY_LENGTH_TOO_SHORT = "MAP_KEY_LENGTH_TOO_SHORT",
  MAP_KEY_LENGTH_TOO_LONG = "MAP_KEY_LENGTH_TOO_LONG",
  INVALID_PAUSE_LENGTH = "INVALID_PAUSE_LENGTH",
  INVALID_DATE = "INVALID_DATE",

  // Apple Pay Errors
  APPLE_TTP_PIN_TOKEN = "APPLE_TTP_PIN_TOKEN",
  APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND = "APPLE_PAYMENT_PROCESSING_CERTIFICATE_HASH_NOT_FOUND",

  // Card Validation Errors
  CARD_EXPIRED = "CARD_EXPIRED",
  INVALID_EXPIRATION = "INVALID_EXPIRATION",
  INVALID_EXPIRATION_YEAR = "INVALID_EXPIRATION_YEAR",
  INVALID_EXPIRATION_DATE = "INVALID_EXPIRATION_DATE",
  UNSUPPORTED_CARD_BRAND = "UNSUPPORTED_CARD_BRAND",
  UNSUPPORTED_ENTRY_METHOD = "UNSUPPORTED_ENTRY_METHOD",
  INVALID_ENCRYPTED_CARD = "INVALID_ENCRYPTED_CARD",
  INVALID_CARD = "INVALID_CARD",
  INVALID_CARD_DATA = "INVALID_CARD_DATA",
  CARD_MISMATCH = "CARD_MISMATCH",
  CARD_NOT_SUPPORTED = "CARD_NOT_SUPPORTED",

  // Payment Processing Errors
  PAYMENT_AMOUNT_MISMATCH = "PAYMENT_AMOUNT_MISMATCH",
  GENERIC_DECLINE = "GENERIC_DECLINE",
  CVV_FAILURE = "CVV_FAILURE",
  ADDRESS_VERIFICATION_FAILURE = "ADDRESS_VERIFICATION_FAILURE",
  INVALID_ACCOUNT = "INVALID_ACCOUNT",
  CURRENCY_MISMATCH = "CURRENCY_MISMATCH",
  INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS",
  INSUFFICIENT_PERMISSIONS = "INSUFFICIENT_PERMISSIONS",
  CARDHOLDER_INSUFFICIENT_PERMISSIONS = "CARDHOLDER_INSUFFICIENT_PERMISSIONS",
  TRANSACTION_LIMIT = "TRANSACTION_LIMIT",
  VOICE_FAILURE = "VOICE_FAILURE",
  PAN_FAILURE = "PAN_FAILURE",
  EXPIRATION_FAILURE = "EXPIRATION_FAILURE",
  READER_DECLINED = "READER_DECLINED",
  INVALID_PIN = "INVALID_PIN",
  MISSING_PIN = "MISSING_PIN",
  MISSING_ACCOUNT_TYPE = "MISSING_ACCOUNT_TYPE",
  INVALID_POSTAL_CODE = "INVALID_POSTAL_CODE",
  INVALID_FEES = "INVALID_FEES",
  MANUALLY_ENTERED_PAYMENT_NOT_SUPPORTED = "MANUALLY_ENTERED_PAYMENT_NOT_SUPPORTED",
  PAYMENT_LIMIT_EXCEEDED = "PAYMENT_LIMIT_EXCEEDED",
  GIFT_CARD_AVAILABLE_AMOUNT = "GIFT_CARD_AVAILABLE_AMOUNT",
  ACCOUNT_UNUSABLE = "ACCOUNT_UNUSABLE",
  BUYER_REFUSED_PAYMENT = "BUYER_REFUSED_PAYMENT",

  // Delayed Transaction Errors
  DELAYED_TRANSACTION_EXPIRED = "DELAYED_TRANSACTION_EXPIRED",
  DELAYED_TRANSACTION_CANCELED = "DELAYED_TRANSACTION_CANCELED",
  DELAYED_TRANSACTION_CAPTURED = "DELAYED_TRANSACTION_CAPTURED",
  DELAYED_TRANSACTION_FAILED = "DELAYED_TRANSACTION_FAILED",

  // Token Errors
  CARD_TOKEN_EXPIRED = "CARD_TOKEN_EXPIRED",
  CARD_TOKEN_USED = "CARD_TOKEN_USED",
  SOURCE_USED = "SOURCE_USED",
  SOURCE_EXPIRED = "SOURCE_EXPIRED",

  // Amount/Limit Errors
  AMOUNT_TOO_HIGH = "AMOUNT_TOO_HIGH",
  UNSUPPORTED_INSTRUMENT_TYPE = "UNSUPPORTED_INSTRUMENT_TYPE",

  // Refund Errors
  REFUND_AMOUNT_INVALID = "REFUND_AMOUNT_INVALID",
  REFUND_ALREADY_PENDING = "REFUND_ALREADY_PENDING",
  PAYMENT_NOT_REFUNDABLE = "PAYMENT_NOT_REFUNDABLE",
  PAYMENT_NOT_REFUNDABLE_DUE_TO_DISPUTE = "PAYMENT_NOT_REFUNDABLE_DUE_TO_DISPUTE",
  REFUND_ERROR_PAYMENT_NEEDS_COMPLETION = "REFUND_ERROR_PAYMENT_NEEDS_COMPLETION",
  REFUND_DECLINED = "REFUND_DECLINED",
  INSUFFICIENT_PERMISSIONS_FOR_REFUND = "INSUFFICIENT_PERMISSIONS_FOR_REFUND",
  RESERVATION_DECLINED = "RESERVATION_DECLINED",

  // Loyalty Errors
  UNSUPPORTED_LOYALTY_REWARD_TIER = "UNSUPPORTED_LOYALTY_REWARD_TIER",

  // Order Errors
  ORDER_UNPAID_NOT_RETURNABLE = "ORDER_UNPAID_NOT_RETURNABLE",

  // General API Errors
  IDEMPOTENCY_KEY_REUSED = "IDEMPOTENCY_KEY_REUSED",
  UNEXPECTED_VALUE = "UNEXPECTED_VALUE",
  SANDBOX_NOT_SUPPORTED = "SANDBOX_NOT_SUPPORTED",
  INVALID_EMAIL_ADDRESS = "INVALID_EMAIL_ADDRESS",
  INVALID_PHONE_NUMBER = "INVALID_PHONE_NUMBER",
  CHECKOUT_EXPIRED = "CHECKOUT_EXPIRED",
  BAD_CERTIFICATE = "BAD_CERTIFICATE",
  INVALID_SQUARE_VERSION_FORMAT = "INVALID_SQUARE_VERSION_FORMAT",
  API_VERSION_INCOMPATIBLE = "API_VERSION_INCOMPATIBLE",
  CARD_PRESENCE_REQUIRED = "CARD_PRESENCE_REQUIRED",
  UNSUPPORTED_SOURCE_TYPE = "UNSUPPORTED_SOURCE_TYPE",

  // Plaid Errors
  PLAID_ERROR = "PLAID_ERROR",
  PLAID_ERROR_ITEM_LOGIN_REQUIRED = "PLAID_ERROR_ITEM_LOGIN_REQUIRED",
  PLAID_ERROR_RATE_LIMIT = "PLAID_ERROR_RATE_LIMIT",

  // Card Decline Errors
  CARD_DECLINED = "CARD_DECLINED",
  VERIFY_CVV_FAILURE = "VERIFY_CVV_FAILURE",
  VERIFY_AVS_FAILURE = "VERIFY_AVS_FAILURE",
  CARD_DECLINED_CALL_ISSUER = "CARD_DECLINED_CALL_ISSUER",
  CARD_DECLINED_VERIFICATION_REQUIRED = "CARD_DECLINED_VERIFICATION_REQUIRED",
  BAD_EXPIRATION = "BAD_EXPIRATION",
  CHIP_INSERTION_REQUIRED = "CHIP_INSERTION_REQUIRED",
  ALLOWABLE_PIN_TRIES_EXCEEDED = "ALLOWABLE_PIN_TRIES_EXCEEDED",

  // HTTP Status Errors
  UNKNOWN_BODY_PARAMETER = "UNKNOWN_BODY_PARAMETER",
  NOT_FOUND = "NOT_FOUND",
  METHOD_NOT_ALLOWED = "METHOD_NOT_ALLOWED",
  NOT_ACCEPTABLE = "NOT_ACCEPTABLE",
  REQUEST_TIMEOUT = "REQUEST_TIMEOUT",
  CONFLICT = "CONFLICT",
  GONE = "GONE",
  REQUEST_ENTITY_TOO_LARGE = "REQUEST_ENTITY_TOO_LARGE",
  UNSUPPORTED_MEDIA_TYPE = "UNSUPPORTED_MEDIA_TYPE",
  UNPROCESSABLE_ENTITY = "UNPROCESSABLE_ENTITY",
  RATE_LIMITED = "RATE_LIMITED",
  NOT_IMPLEMENTED = "NOT_IMPLEMENTED",
  BAD_GATEWAY = "BAD_GATEWAY",
  SERVICE_UNAVAILABLE = "SERVICE_UNAVAILABLE",
  GATEWAY_TIMEOUT = "GATEWAY_TIMEOUT",
}

// TypeScript interface for individual error within the error response
export interface IPaymentErrorDetail {
  code: SquareErrorCode;
  detail: string;
  field?: string;
  category: string;
}

// TypeScript interface for PaymentError document
export interface IPaymentError extends Document {
  _id: string;
  eventId?: string;
  eventTitle?: string;
  customerEmail?: string;
  customerPhone?: string;
  customerName?: string;
  paymentAmount?: number;
  sourceId?: string;
  paymentErrors: IPaymentErrorDetail[]; // Renamed from 'errors' to avoid conflict with Document.errors
  rawErrorResponse?: unknown; // Changed from 'any' to 'unknown'
  attemptedAt: Date;
  createdAt: Date;
  updatedAt: Date;
}

// Define the PaymentErrorDetail schema
const PaymentErrorDetailSchema = new Schema(
  {
    code: {
      type: String,
      required: true,
      trim: true,
      enum: Object.values(SquareErrorCode),
    },
    detail: {
      type: String,
      required: true,
      trim: true,
    },
    field: {
      type: String,
      trim: true,
    },
    category: {
      type: String,
      required: true,
      trim: true,
    },
  },
  {
    _id: false, // Don't auto-generate IDs for error details
  }
);

// Main PaymentError schema
const PaymentErrorSchema = new Schema<IPaymentError>(
  {
    eventId: {
      type: String,
      trim: true,
    },
    eventTitle: {
      type: String,
      trim: true,
    },
    customerEmail: {
      type: String,
      trim: true,
    },
    customerPhone: {
      type: String,
      trim: true,
    },
    customerName: {
      type: String,
      trim: true,
    },
    paymentAmount: {
      type: Number,
      min: 0,
    },
    sourceId: {
      type: String,
      trim: true,
    },
    paymentErrors: {
      type: [PaymentErrorDetailSchema],
      required: true,
      validate: {
        validator: function (paymentErrors: IPaymentErrorDetail[]) {
          return paymentErrors && paymentErrors.length > 0;
        },
        message: "At least one error must be provided",
      },
    },
    rawErrorResponse: {
      type: Schema.Types.Mixed,
    },
    attemptedAt: {
      type: Date,
      required: true,
      default: Date.now,
    },
  },
  {
    timestamps: true,
  }
);

// Index for efficient searching by event and date
PaymentErrorSchema.index({ eventId: 1, attemptedAt: -1 });
PaymentErrorSchema.index({ customerEmail: 1, attemptedAt: -1 });
PaymentErrorSchema.index({ attemptedAt: -1 });

// Static method to test connection
PaymentErrorSchema.statics.testConnection = function () {
  return this.findOne().limit(1);
};

// Prevent duplicate models in development
const PaymentError: Model<IPaymentError> =
  mongoose.models.PaymentError ||
  mongoose.model<IPaymentError>("PaymentError", PaymentErrorSchema);

export default PaymentError;
